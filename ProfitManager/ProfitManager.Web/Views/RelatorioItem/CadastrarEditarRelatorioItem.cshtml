@model ProfitManager.Fabrica.Entidade.RelatorioItem

@{
    ViewBag.Title = "Relatório item";
    Layout = "~/Views/Shared/_LayoutRestrito.cshtml";
}

@using (Html.BeginForm("CadastrarEditarRelatorioItem", "RelatorioItem", FormMethod.Post))
{
    <div class="formcadeidt" style="width: 60%;margin: 20px auto">

        <h3 style="border-bottom: 1px solid #e5e5e5">Relatório item</h3>
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.DataHoraCriacao)
        @Html.HiddenFor(x => x.Relatorio.Id)

        <div style="margin-bottom: 10px">
            @Html.LabelFor(x => x.Codigo):
            @Html.TextBoxFor(x => x.Codigo)
            @Html.ValidationMessageFor(x => x.Codigo)
        </div>

        <div style="margin-bottom: 10px">
            @Html.LabelFor(x => x.Nome):
            @Html.TextBoxFor(x => x.Nome)
            @Html.ValidationMessageFor(x => x.Nome)
        </div>
        
        <div style="margin-bottom: 10px">
            @Html.LabelFor(x => x.Condicional):<br/>
            @Html.EnumDropDownListFor(x => x.Condicional, false)
            @Html.ValidationMessageFor(x => x.Condicional)
        </div>
        
        <div style="margin-bottom: 10px">
            @Html.LabelFor(x => x.Negrito):<br />
            @Html.EnumDropDownListFor(x => x.Negrito, false)
            @Html.ValidationMessageFor(x => x.Negrito)
        </div>

        @{
            string nomeRelatorio = "";
            string nomeParent = "";

            if (Model.Relatorio != null)
            {
                if (Model.Relatorio.Id != 0)
                {
                    nomeRelatorio = Model.Relatorio.NomeNormalizado;
                }
            }
            if (Model.Parent != null)
            {
                if (Model.Parent.Id != 0)
                {
                    nomeParent = Model.Parent.NomeNormalizado;
                }
            }
        }

        <div style="margin-bottom: 10px">
            @Html.LabelFor(x => x.Relatorio):<br />
            @(Html.Kendo().AutoCompleteFor(x => x.Relatorio).Value(nomeRelatorio)
                  .Name("relatorio")
                  .DataTextField("NomeNormalizado")
                  .MinLength(1)
                  .HtmlAttributes(new { style = "width:100%;border: solid thin #ccc;border-radius: none;" })
                  .DataSource(source =>
                  {
                      source.Read(read =>
                      {
                          read.Action("GetRelatorio", "RelatorioItem")
                              .Data("onAdditionalDataRelatorio");
                      }).ServerFiltering(true);
                  }).Events(events => events.Select("RelatorioSelect"))

            )
            @Html.ValidationMessageFor(x => x.Relatorio)
        </div>

        <div style="margin-bottom: 10px">
            @Html.HiddenFor(x => x.Parent.Id)
            @Html.LabelFor(x => x.Parent):<br />
            @(Html.Kendo().AutoCompleteFor(x => x.Parent).Value(nomeParent)
                  .Name("relatorioParent")
                  .DataTextField("NomeNormalizado")
                  .MinLength(1)
                  .HtmlAttributes(new { style = "width:100%;border: solid thin #ccc;border-radius: none;", @disabled = "disabled" })
                  .DataSource(source =>
                  {
                      source.Read(read =>
                      {
                          read.Action("GetRelatorioItem", "RelatorioItem")
                              .Data("onAdditionalDataRelatorioItem");
                      }).ServerFiltering(true);
                  }).Events(events => events.Select("ParentSelect"))

            )
            @Html.ValidationMessageFor(x => x.Parent.Id)
        </div>

        <div style="margin-bottom: 10px">
            @Html.Hidden("idContaContabil")
            @Html.Label("Contas contábeis"):<br />
            @(Html.Kendo().AutoComplete()
                  .Name("contaContabil")
                  .DataTextField("NomeNormalizado")
                  .MinLength(1)
                  .HtmlAttributes(new { style = "width:80%;border: solid thin #ccc;border-radius: none;", @disabled = "disabled" })
                  .DataSource(source =>
                  {
                      source.Read(read =>
                      {
                          read.Action("GetContaContabil", "RelatorioItem")
                              .Data("onAdditionalData");
                      })
                          .ServerFiltering(true);
                  }).Events(events => events.Select("ContaContabilSelect"))
            )


            <input type="submit" value="Adicionar" name="adicionar"
                   style="margin-top: 1px;padding: 8px;width: 18%;" class="btn-custom" />

        </div>

        @for (int i = 0; i < Model.ListContaContabilRelatorioItem.Length; i++)
        {
            @Html.HiddenFor(x => x.ListContaContabilRelatorioItem[i].Id)
            @Html.HiddenFor(x => x.ListContaContabilRelatorioItem[i].ContaContabil.Id)
        }

        <div style="max-height: 300px;overflow: auto;">
            <table class="table">
                <tr>
                    <th>
                        Conta contábil
                    </th>
                    <th></th>
                </tr>
                @foreach (var item in Model.ListContaContabilRelatorioItem)
                {
                    <tr>
                        <td style="width: 80%;">
                            @item.ContaContabil.NomeNormalizado
                        </td>
                        <td style="width: 20%;">
                            <button class="k-button k-button-icontext k-grid-delete" type="submit" name="excluirItem"
                                    value="@item.GetHashCode()">
                                <span class="k-icon k-delete"></span>
                                Excluir
                            </button>
                        </td>
                    </tr>
                }
            </table>
        </div>



        <div style="margin-bottom: 50px">
            <input type="submit" value="Salvar" class="btn btn-primary" />
        </div>

    </div>
}

@section scripts
{
    <script>


        function onAdditionalDataRelatorio() {
            return {
                text: $("#relatorio").val()
            };
        }

        function onAdditionalData() {
            return {
                text: $("#contaContabil").val()
            };
        }
        
        function onAdditionalDataRelatorioItem() {
            return {
                text: $("#relatorioParent").val(),
                idRelatorio: $("#Relatorio_Id").val()
            };
        }

        function ContaContabilSelect(e) {
            var dataItem = this.dataItem(e.item.index());
            $("#idContaContabil").val(dataItem.Id);
        }

        function RelatorioSelect(e) {
            var dataItem = this.dataItem(e.item.index());
            $("#Relatorio_Id").val(dataItem.Id);
            $('#contaContabil').removeAttr('disabled');
            $('#relatorioParent').removeAttr('disabled');
        }
        
        function ParentSelect(e) {
            var dataItem = this.dataItem(e.item.index());
            $("#Parent_Id").val(dataItem.Id);
        }

        $(document).ready(function() {
            if ($("#relatorio").val() != "") {
                $('#contaContabil').removeAttr('disabled');
                $('#relatorioParent').removeAttr('disabled');
            }
        });

    </script>
}

<style>
    .k-autocomplete.k-state-default, .k-picker-wrap.k-state-default,
     .k-numeric-wrap.k-state-default, .k-dropdown-wrap.k-state-default {
        background-color: transparent !important;
    }


    .k-block, .k-button, .k-textbox, .k-drag-clue, .k-touch-scrollbar, .k-window,
     .k-window-titleless .k-window-content, .k-window-action, .k-inline-block,
     .k-grid .k-filter-options, .k-grouping-header .k-group-indicator, .k-autocomplete,
     .k-multiselect, .k-combobox, .k-dropdown, .k-dropdown-wrap, .k-datepicker, .k-timepicker,
     .k-colorpicker, .k-datetimepicker, .k-notification, .k-numerictextbox, .k-picker-wrap,
     .k-numeric-wrap, .k-colorpicker, .k-list-container, .k-calendar-container, .k-calendar td,
     .k-calendar .k-link, .k-treeview .k-in, .k-editor-inline, .k-tooltip, .k-tile, .k-slider-track,
     .k-slider-selection, .k-upload {
        border-radius: 0px;
        border: medium none !important;
        border: none !important;
    }

    .k-textbox > input, .k-autocomplete .k-input, .k-multiselect-wrap {
        border-radius: 0px;
    }
</style>