using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Mvc;
using System.Web.WebPages;
using Kendo.Mvc.Extensions;
using ProfitManager.Fabrica.Entidade;
using ProfitManager.Fabrica.Enum;
using ProfitManager.Negocio.Implementacao;
using ProfitManager.Web.RepositorioWeb;
using ProfitManager.Web.ViewModels;

namespace ProfitManager.Web.Controllers.AcessoRestrito
{
    [HandleError]
    public class EventoLancamentoController : BaseController
    {

        public ActionResult Index(string novaData)
        {
            EmpresaUsuario empresaUsuario =
                    FuncoesEmpresaUsuario.Load(RepositorioWebUsuario.VerificaSeOUsuarioEstaLogado(true).Id);

            var eventoLancamento = new EventoLancamento();
            eventoLancamento.Data = DateTime.Now;
            ViewBag.Empresa = empresaUsuario.Empresa.NomeFantasia;

            if (!novaData.HasValue())
            {
                DateTime dataSession = RepositorioWebUsuario.GetDateQueryCookie();
                if (dataSession != DateTime.MinValue)
                {
                    return RedirectToAction("VisualizarEventoLancamento", new { dataLancamentos = dataSession });
                }
            }

            return View(eventoLancamento);
        }

        [HttpGet]
        public ActionResult AbreEventoHelp(int? id)
        {
            var evento = FuncoesEventoLancamento.CarregaEventoHelp((int)id);
            var nomeEvento = FuncoesEventoLancamento.LoadTipoEvento((int)id);
            ViewBag.eventoHelp = evento.Evento.Help;
            ViewBag.NomeEvento = nomeEvento.CampoNome.Nome;
            return PartialView("AbreEventoHelp", evento);
        }

        [HttpGet]
        public ActionResult CadastrarEditarNotaExplicativa(int? id)
        {
            DateTime dataSession = RepositorioWebUsuario.GetDateQueryCookie();
            var tipoEvento = FuncoesEventoLancamento.LoadTipoEvento((int)id);
            if (tipoEvento.TipoEventoLancamento == EnumTipoEventoLancamento.Diario)
            {
                var evento = FuncoesEventoLancamento.LoadNotaExplicativa((int)id, dataSession);
                return PartialView("CadastrarEditarNotaExplicativa", evento);
            }
            else
           {
                DateTime dataPrimeiroDiaMes = new DateTime(dataSession.Year, dataSession.Month, 1);
                var evento = FuncoesEventoLancamento.LoadNotaExplicativa((int)id, dataPrimeiroDiaMes);
                return PartialView("CadastrarEditarNotaExplicativa", evento);
           }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CadastrarEditarNotaExplicativa(EventoLancamento eventoLancamento)
        {
            DateTime dataSession = RepositorioWebUsuario.GetDateQueryCookie();
            var dataPrimeiroDiaMes = new DateTime(dataSession.Year, dataSession.Month, 1);


            var evento = FuncoesEventoLancamento.LoadNotaExplicativa(eventoLancamento.Id, dataSession);

            if (evento != null)
            {
                evento.NotaExplicativa = eventoLancamento.NotaExplicativa;

                ModelState["Evento"].Errors.Clear();
                if (ModelState.IsValid)
                {
                    FuncoesEventoLancamento.Salvar(evento);
                    return RedirectToAction("VisualizarEventoLancamento", new {dataLancamentos = eventoLancamento.Data});
                }
            }
            else
            {
                return RedirectToAction("VisualizarEventoLancamento", new { dataLancamentos = dataSession });

            }


            return View();
        }

        [HttpPost]
        public ActionResult SetDataEventoLancamento(EventoLancamento eventoLancamento)
        {
            RepositorioWebUsuario.SetDateQueryCookie(eventoLancamento.Data);
            Thread.Sleep(500);
            return RedirectToAction("VisualizarEventoLancamento", new { dataLancamentos = eventoLancamento.Data });
        }

        public ActionResult VisualizarEventoLancamento(DateTime dataLancamentos)
        {

            EmpresaUsuario empresaUsuario =
                   FuncoesEmpresaUsuario.Load(RepositorioWebUsuario.VerificaSeOUsuarioEstaLogado(true).Id);
            ViewBag.Empresa = empresaUsuario.Empresa.NomeFantasia;

            ViewBag.DataLancamento = dataLancamentos;
            List<EventoLancamentoViewModel> listLancamentosPeriodo = LancamentosPeriodo(dataLancamentos);

            List<FechamentoCaixa> listTipoDocumento = LancamentosFechamentoCaixa(dataLancamentos);
            ViewBag.listaTipoDocumento = listTipoDocumento;

            return View(listLancamentosPeriodo);
        }

        private List<FechamentoCaixa> LancamentosFechamentoCaixa(DateTime dataLancamento)
        {
            EmpresaUsuario empresaUsuario =
                FuncoesEmpresaUsuario.Load(RepositorioWebUsuario.VerificaSeOUsuarioEstaLogado(true).Id);

            int empresa = empresaUsuario.Empresa.Id;

            List<TipoDocumentoFechamentoCaixa> listTipoDocumento = FuncoesTipoDocumentoFechamentoCaixa.Load();

            var listFechamentoCaixa = FuncoesFechamentoCaixa.LoadByDocumentoAndEmpresaAndData(listTipoDocumento, empresa, dataLancamento);

            var valorNovoDia = new List<FechamentoCaixa>();
            valorNovoDia = FuncoesFechamentoCaixa.CarregaValorDiario(listTipoDocumento.Select(x => x.Id).ToList(), empresaUsuario.Empresa.Id, dataLancamento);

            foreach (var tipodocumento in listTipoDocumento)
            {
                var tipodocumentoExistente = valorNovoDia.FirstOrDefault(x => x.TipoDocumentoFechamentoCaixa.Id == tipodocumento.Id);
                if (listFechamentoCaixa.All(x => x.TipoDocumentoFechamentoCaixa.Id != tipodocumento.Id))
                    listFechamentoCaixa.Add(new FechamentoCaixa()
                    {
                        Data = dataLancamento,
                        TipoDocumentoFechamentoCaixa = tipodocumento,
                        Empresa = empresaUsuario.Empresa,
                        Valor = tipodocumentoExistente != null ? tipodocumentoExistente.Valor : 0,
                    });
            }

            var totalDiaFechamentoCaixa = listFechamentoCaixa.Sum(x => x.Valor);
            ViewBag.TotalDiaFechamentoCaixa = totalDiaFechamentoCaixa;

            return listFechamentoCaixa;

            }
            
            

        private List<EventoLancamentoViewModel> LancamentosPeriodo(DateTime dataLancamento)
        {
            
            EmpresaUsuario empresaUsuario =
                FuncoesEmpresaUsuario.Load(RepositorioWebUsuario.VerificaSeOUsuarioEstaLogado(true).Id);

            int categoriaEmpresa = empresaUsuario.Empresa.CategoriaEmpresa.Id;

            List<Evento> listEvento = FuncoesEvento.LoadEventosPorTipo(categoriaEmpresa);


            var listEventoLancamento = FuncoesEventoLancamento.LoadByGrupoAreaAndEmpresaAndData(listEvento,empresaUsuario.Empresa.Id, dataLancamento);


            var valoresMensalNovoDia = new List<EventoLancamento>();

            //if (listEventoLancamento.Count == 0)
            //{
                valoresMensalNovoDia = FuncoesEventoLancamento.CarregaValorMensal(listEvento.Select(x => x.Id).ToList(),empresaUsuario.Empresa.Id, dataLancamento);
            //}

            foreach (var evento in listEvento)
            {
                var eventoExistente = valoresMensalNovoDia.FirstOrDefault(x => x.Evento.Id == evento.Id);
                if (listEventoLancamento.All(x => x.Evento.Id != evento.Id))
                    listEventoLancamento.Add(new EventoLancamento
                    {
                        Data = dataLancamento,
                        Evento = evento,
                        Empresa = empresaUsuario.Empresa,
                        ValorMes = eventoExistente != null ? eventoExistente.ValorMes : 0,
            });
            }


            var listEventoLancamentoViewModel = new List<EventoLancamentoViewModel>();

            foreach (var eventoLancamentoGroup in listEventoLancamento)
            {
                var eventoLancamentoViewModel = new EventoLancamentoViewModel
                {
                    IdEvento = eventoLancamentoGroup.Evento.Id,
                    Data = eventoLancamentoGroup.Data,
                    IdEmpresa = eventoLancamentoGroup.Empresa.Id,
                    Evento = eventoLancamentoGroup.Evento.CampoNome.Nome,
                    EventoHelper = eventoLancamentoGroup.Evento.CampoHelp.Nome,
                    Area = eventoLancamentoGroup.Evento.Area,
                    ValorDia = eventoLancamentoGroup.Valor,
                    ValorMes = eventoLancamentoGroup.ValorMes,
                    NotaExplicativa = eventoLancamentoGroup.NotaExplicativa,
                    TipoEventoLancamento = eventoLancamentoGroup.Evento.TipoEventoLancamento,
                    MaisUsado = eventoLancamentoGroup.Evento.MaisUsado,
                    Help = eventoLancamentoGroup.Evento.Help
                };

                

                listEventoLancamentoViewModel.Add(eventoLancamentoViewModel);
            }

            var valorTotalEntradasDiaAnterior =
            FuncoesEventoLancamento.CarregaValorTotalDiaMesAnterior(empresaUsuario.Empresa.Id, dataLancamento.AddDays(-1),
                EnumTipoEventoLancamento.Diario, 5);
            var valorTotalSaidasDiaAnterior =
                FuncoesEventoLancamento.CarregaValorTotalDiaMesAnterior(empresaUsuario.Empresa.Id, dataLancamento.AddDays(-1),
                    EnumTipoEventoLancamento.Diario, 6);
            var listaSaldoInicialDiaAnterior = FuncoesEventoLancamento.PegaSaldoInicialContaContabil(empresaUsuario.Empresa.Id, 1 , Convert.ToDateTime("1800-01-01"),true) + valorTotalEntradasDiaAnterior - valorTotalSaidasDiaAnterior;

            DateTime dataMesAnterior = dataLancamento;
            dataMesAnterior = dataMesAnterior.AddMonths(-1);
            dataMesAnterior = new DateTime(dataMesAnterior.Year, dataMesAnterior.Month, DateTime.DaysInMonth(dataMesAnterior.Year, dataMesAnterior.Month));
            var listaSaldoinicialMesAnterior = FuncoesEventoLancamento.PegaSaldoInicialContaContabil(empresaUsuario.Empresa.Id, 1, Convert.ToDateTime("1800-01-01"),true);

            var totalDia = listEventoLancamento.Where(x => x.Evento.TipoEventoLancamento == EnumTipoEventoLancamento.Diario && x.Evento.Area.Codigo == "0001")
                    .Sum(x => x.Valor);

            
            var totalMes = listEventoLancamento.Where(x => x.Evento.Area.Codigo == "0001")
                    .Sum(x => x.ValorMes);

            var totalDiaSaida = listEventoLancamento.Where(x => x.Evento.TipoEventoLancamento == EnumTipoEventoLancamento.Diario && x.Evento.Area.Codigo == "0002")
                    .Sum(x => x.Valor);

            var totalMesSaida = listEventoLancamento.Where(x => x.Evento.Area.Codigo == "0002")
                    .Sum(x => x.ValorMes);

            var totalDiaMovimento = listEventoLancamento.Where(x => x.Evento.TipoEventoLancamento == EnumTipoEventoLancamento.Diario && x.Evento.Area.Codigo == "0003")
                    .Sum(x => x.Valor);

            var totalMesMovimento = listEventoLancamento.Where(x => x.Evento.Area.Codigo == "0003").Sum(x => x.ValorMes);


            var valorTotalEntradasMesAnterior =
                        FuncoesEventoLancamento.CarregaValorTotalMesAtual(empresaUsuario.Empresa.Id, dataMesAnterior,
                            EnumTipoEventoLancamento.Diario, 5);
            var valorTotalSaidasMesAnterior =
                FuncoesEventoLancamento.CarregaValorTotalMesAtual(empresaUsuario.Empresa.Id, dataMesAnterior,
                    EnumTipoEventoLancamento.Diario, 6);

            ViewBag.valorTotalEntradasDiaAnterior =
                        FuncoesEventoLancamento.CarregaValorTotalMesAtual(empresaUsuario.Empresa.Id, dataLancamento.AddDays(-1),
                            EnumTipoEventoLancamento.Diario, 5);
            ViewBag.valorTotalSaidasDiaAnterior =
                FuncoesEventoLancamento.CarregaValorTotalMesAtual(empresaUsuario.Empresa.Id, dataLancamento.AddDays(-1),
                    EnumTipoEventoLancamento.Diario, 6);

            ViewBag.TotalDia = totalDia;
            ViewBag.TotalMes = totalMes;

            ViewBag.TotalDiaSaida = totalDiaSaida;
            ViewBag.TotalMesSaida = totalMesSaida;

            ViewBag.TotalDiaMovimento = totalDiaMovimento;
            ViewBag.TotalMesMovimento = totalMesMovimento;

            ViewBag.TotalSaldoinicialDiaAnteiorContaCaixa = listaSaldoInicialDiaAnterior;
            ViewBag.TotalSaldoinicialMesAnteriorContaCaixa = listaSaldoinicialMesAnterior + valorTotalEntradasMesAnterior - valorTotalSaidasMesAnterior;

            return listEventoLancamentoViewModel;
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Editing_Update(FormCollection form)
        {
            var dataLancamento = form["dataLancamento"].AsDateTime();
            var eventosdiarios = form.AllKeys.Where(x => x.StartsWith("D"));
            var eventosmensal = form.AllKeys.Where(x => x.StartsWith("M"));
            var fechamentoscaixadiarios = form.AllKeys.Where(x => x.StartsWith("FD"));

            var dataPrimeiroDiaMes = new DateTime(dataLancamento.Year, dataLancamento.Month, 1);

            EmpresaUsuario empresaUsuario =
                FuncoesEmpresaUsuario.Load(RepositorioWebUsuario.VerificaSeOUsuarioEstaLogado(false).Id);

            var listEventos = new List<EventoLancamento>();
            foreach (var item in eventosdiarios)
            {
                int idEvento = Convert.ToInt32(String.Join("", Regex.Split(item, @"[^\d]")));

                var eventoLancamento = new EventoLancamento
                {
                    Data = dataLancamento.Date,
                    Evento = new Evento
                    {
                        Id = idEvento
                    },
                    Valor = Convert.ToDecimal(form[item].Replace(".","")),
                    Empresa = empresaUsuario.Empresa
                };

                listEventos.Add(eventoLancamento);
            }

            //FuncoesEventoLancamento.SalvarOuAtualizarLancamentos(listEventosDiario, dataLancamento, empresaUsuario.Empresa.Id);


            //var listEventosMensal = new List<EventoLancamento>();
            foreach (var item in eventosmensal)
            {
                int idEvento = Convert.ToInt32(String.Join("", Regex.Split(item, @"[^\d]")));

                var eventoLancamento = new EventoLancamento
                {
                    Data = new DateTime(dataLancamento.Year, dataLancamento.Month, 1),
                    Evento = new Evento
                    {
                        Id = idEvento
                    },
                    Valor = Convert.ToDecimal(form[item].Replace(".","")),
                    Empresa = empresaUsuario.Empresa
                };

                listEventos.Add(eventoLancamento);
            }

            FuncoesEventoLancamento.SalvarOuAtualizarLancamentos(listEventos, empresaUsuario.Empresa.Id);


            var listFechamentosDiario = new List<FechamentoCaixa>();
            foreach (var item in fechamentoscaixadiarios)
            {
                int idTipoDocumento = Convert.ToInt32(String.Join("", Regex.Split(item, @"[^\d]")));

                var fechamentoCaixa = new FechamentoCaixa
                {
                    Data = dataLancamento.Date,
                    TipoDocumentoFechamentoCaixa = new TipoDocumentoFechamentoCaixa
                    {
                        Id = idTipoDocumento
                    },
                    Valor = Convert.ToDecimal(form[item]),
                    Empresa = empresaUsuario.Empresa,
                };

                listFechamentosDiario.Add(fechamentoCaixa);
            }
            FuncoesFechamentoCaixa.SalvarOuAtualizarFechamentos(listFechamentosDiario, dataLancamento, empresaUsuario.Empresa.Id);

            TempData["mensagem"] = "Lançamentos gravados com sucesso!";

            return RedirectToAction("VisualizarEventoLancamento", new { dataLancamentos = dataLancamento });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CadastrarEditarEventoLancamento(EventoLancamento eventoLancamento)
        {
            //GAMBIARRA, PESQUISAR METÓDO DE FAZER VALIDAÇÃO CUSTOMIZADA
            if (ModelState.Keys.Any(x => x.Contains("Evento.Area")))
            {
                ModelState.Remove(new KeyValuePair<string, ModelState>("Evento.Area",
                    ModelState["Evento.Area"]));

                if (ModelState.Keys.Any(x => x.Contains("Evento.Codigo")))
                {
                    ModelState.Remove(new KeyValuePair<string, ModelState>("Evento.Codigo",
                    ModelState["Evento.Codigo"]));
                }
                if (ModelState.Keys.Any(x => x.Contains("Evento.CampoNome")))
                {
                    ModelState.Remove(new KeyValuePair<string, ModelState>("Evento.CampoNome",
                    ModelState["Evento.CampoNome"]));
                }
                if (ModelState.Keys.Any(x => x.Contains("Evento.CampoHelp")))
                {
                    ModelState.Remove(new KeyValuePair<string, ModelState>("Evento.CampoHelp",
                    ModelState["Evento.CampoHelp"]));
                }
            }

            if (ModelState.IsValid)
            {
                return RedirectToAction("VisualizarEventoLancamento", new { dataLancamentos = eventoLancamento.Data });
            }

            if (eventoLancamento.Evento.Id != 0)
                eventoLancamento.Evento = FuncoesEvento.Load(eventoLancamento.Evento.Id);

            return View("CadastrarEditarEventoLancamento", eventoLancamento);
        }

        [HttpGet]
        public ActionResult CadastrarEditarEventoLancamento(DateTime dataLancamento, int? id)
        {
            var eventoLancamento = new EventoLancamento();
            eventoLancamento.Data = dataLancamento;

            return View(eventoLancamento);
        }

        public JsonResult GetEventos(string text)
        {
            var listEvento = new List<Evento>();

            if (!string.IsNullOrEmpty(text.Trim()))
            {
                listEvento = FuncoesEvento.Load(text);
            }

            var listEventReturn =
                listEvento.Select(
                    evento => new Evento {Id = evento.Id, Codigo = evento.Codigo, CampoNome = evento.CampoNome})
                    .ToList();

            return Json(listEventReturn, JsonRequestBehavior.AllowGet);
        }

    }
}
