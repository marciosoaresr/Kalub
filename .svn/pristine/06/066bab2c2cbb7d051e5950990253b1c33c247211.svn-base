using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Mvc;
using System.Web.WebPages;
using Kendo.Mvc.Extensions;
using ProfitManager.Fabrica.Entidade;
using ProfitManager.Fabrica.Enum;
using ProfitManager.Negocio.Implementacao;
using ProfitManager.Web.RepositorioWeb;
using ProfitManager.Web.ViewModels;

namespace ProfitManager.Web.Controllers.AcessoRestrito
{
    public class ExtratoContaController : Controller
    {

        public ActionResult Index()
        {
            EmpresaUsuario empresaUsuario =
                FuncoesEmpresaUsuario.Load(RepositorioWebUsuario.VerificaSeOUsuarioEstaLogado(true).Id) ??
                new EmpresaUsuario();

            ViewBag.Empresa = empresaUsuario.Empresa.NomeFantasia;
            
            ViewBag.ListaContaContabil = new SelectList(ListContaContabil().OrderBy(x => x.Text), "Value", "Text");

            return View();
        }

        [HttpPost]
        public ActionResult SetDataBalancete(ExtratoConta extraconta)
        {
            return RedirectToAction("VisualizarExtrato", new { dataAtual = extraconta.DataAtual, dataInicial = extraconta.DataInicial, idConta = extraconta.IdConta });
        }

       
        public ActionResult VisualizarExtrato(DateTime dataAtual, DateTime dataInicial, int idConta)
        {
            EmpresaUsuario empresaUsuario =
                FuncoesEmpresaUsuario.Load(RepositorioWebUsuario.VerificaSeOUsuarioEstaLogado(true).Id);
            if (dataInicial == Convert.ToDateTime("01/01/0001"))
            {
                dataInicial = dataAtual;
            }
            DateTime dataMesAnterior = dataInicial;
            dataMesAnterior = dataMesAnterior.AddMonths(-1);
            dataMesAnterior = new DateTime(dataMesAnterior.Year, dataMesAnterior.Month, DateTime.DaysInMonth(dataMesAnterior.Year, dataMesAnterior.Month));
            ViewBag.listaSaldoinicialMesAnterior = FuncoesEventoLancamento.PegaSaldoInicialContaContabil(empresaUsuario.Empresa.Id, idConta, dataMesAnterior, true);

            var list = FuncoesExtratoConta.CarregaExtrato(empresaUsuario.Empresa.Id, dataInicial, idConta);

            List<ExtratoConta> listExtratoContaAumenta = list.Where(x => x.Saldo > 0).ToList();
            List<ExtratoConta> listExtratoContaDiminui = list.Where(x => x.Saldo < 0).ToList();
            ViewBag.ContaContabil = FuncoesContaContabil.Load(idConta);
            ViewBag.ListaExtratoAumenta = listExtratoContaAumenta;
            ViewBag.ListaExtratoDiminui = listExtratoContaDiminui;
            ViewBag.totalAumentoSaldo = listExtratoContaAumenta.Sum(x => x.Saldo);
            ViewBag.totalReducaoSaldo = Math.Abs(listExtratoContaDiminui.Sum(x => x.Saldo));
            ViewBag.saldoFinal = FuncoesEventoLancamento.PegaSaldoInicialContaContabil(empresaUsuario.Empresa.Id, idConta, dataMesAnterior, true) + ViewBag.totalAumentoSaldo - ViewBag.totalReducaoSaldo;
            ViewBag.DataInicial = dataInicial.Month + "/" + dataInicial.Year;
            ViewBag.Empresa = empresaUsuario.Empresa.NomeFantasia;

            return View();
        }

        private List<SelectListItem> ListContaContabil()
        {
            EmpresaUsuario empresaUsuario =
                FuncoesEmpresaUsuario.Load(RepositorioWebUsuario.VerificaSeOUsuarioEstaLogado(true).Id);

            List<ExtratoConta> listContaContabil = FuncoesExtratoConta.ListContaContabil(empresaUsuario.Empresa.Id);
            var listItemsContaContabil = new List<SelectListItem>();

            foreach (var conta in listContaContabil)
            {
                var item = new SelectListItem
                {
                    Text = conta.NomeNormalizado,
                    Value = conta.Id.ToString()
                };

                listItemsContaContabil.Add(item);
            }



            return listItemsContaContabil;
        }
    }
}
